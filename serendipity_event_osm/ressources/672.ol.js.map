{"version":3,"file":"672.ol.js","mappings":"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","sources":["webpack://ol/./node_modules/geotiff/dist-module/predictor.js","webpack://ol/./node_modules/geotiff/dist-module/compression/basedecoder.js","webpack://ol/./node_modules/geotiff/dist-module/compression/lzw.js"],"sourcesContent":["function decodeRowAcc(row, stride) {\n  let length = row.length - stride;\n  let offset = 0;\n  do {\n    for (let i = stride; i > 0; i--) {\n      row[offset + stride] += row[offset];\n      offset++;\n    }\n\n    length -= stride;\n  } while (length > 0);\n}\n\nfunction decodeRowFloatingPoint(row, stride, bytesPerSample) {\n  let index = 0;\n  let count = row.length;\n  const wc = count / bytesPerSample;\n\n  while (count > stride) {\n    for (let i = stride; i > 0; --i) {\n      row[index + stride] += row[index];\n      ++index;\n    }\n    count -= stride;\n  }\n\n  const copy = row.slice();\n  for (let i = 0; i < wc; ++i) {\n    for (let b = 0; b < bytesPerSample; ++b) {\n      row[(bytesPerSample * i) + b] = copy[((bytesPerSample - b - 1) * wc) + i];\n    }\n  }\n}\n\nexport function applyPredictor(block, predictor, width, height, bitsPerSample,\n  planarConfiguration) {\n  if (!predictor || predictor === 1) {\n    return block;\n  }\n\n  for (let i = 0; i < bitsPerSample.length; ++i) {\n    if (bitsPerSample[i] % 8 !== 0) {\n      throw new Error('When decoding with predictor, only multiple of 8 bits are supported.');\n    }\n    if (bitsPerSample[i] !== bitsPerSample[0]) {\n      throw new Error('When decoding with predictor, all samples must have the same size.');\n    }\n  }\n\n  const bytesPerSample = bitsPerSample[0] / 8;\n  const stride = planarConfiguration === 2 ? 1 : bitsPerSample.length;\n\n  for (let i = 0; i < height; ++i) {\n    // Last strip will be truncated if height % stripHeight != 0\n    if (i * stride * width * bytesPerSample >= block.byteLength) {\n      break;\n    }\n    let row;\n    if (predictor === 2) { // horizontal prediction\n      switch (bitsPerSample[0]) {\n        case 8:\n          row = new Uint8Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n          );\n          break;\n        case 16:\n          row = new Uint16Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 2,\n          );\n          break;\n        case 32:\n          row = new Uint32Array(\n            block, i * stride * width * bytesPerSample, stride * width * bytesPerSample / 4,\n          );\n          break;\n        default:\n          throw new Error(`Predictor 2 not allowed with ${bitsPerSample[0]} bits per sample.`);\n      }\n      decodeRowAcc(row, stride, bytesPerSample);\n    } else if (predictor === 3) { // horizontal floating point\n      row = new Uint8Array(\n        block, i * stride * width * bytesPerSample, stride * width * bytesPerSample,\n      );\n      decodeRowFloatingPoint(row, stride, bytesPerSample);\n    }\n  }\n  return block;\n}\n","import { applyPredictor } from '../predictor.js';\n\nexport default class BaseDecoder {\n  async decode(fileDirectory, buffer) {\n    const decoded = await this.decodeBlock(buffer);\n    const predictor = fileDirectory.Predictor || 1;\n    if (predictor !== 1) {\n      const isTiled = !fileDirectory.StripOffsets;\n      const tileWidth = isTiled ? fileDirectory.TileWidth : fileDirectory.ImageWidth;\n      const tileHeight = isTiled ? fileDirectory.TileLength : (\n        fileDirectory.RowsPerStrip || fileDirectory.ImageLength\n      );\n      return applyPredictor(\n        decoded, predictor, tileWidth, tileHeight, fileDirectory.BitsPerSample,\n        fileDirectory.PlanarConfiguration,\n      );\n    }\n    return decoded;\n  }\n}\n","import BaseDecoder from './basedecoder.js';\n\nconst MIN_BITS = 9;\nconst CLEAR_CODE = 256; // clear code\nconst EOI_CODE = 257; // end of information\nconst MAX_BYTELENGTH = 12;\n\nfunction getByte(array, position, length) {\n  const d = position % 8;\n  const a = Math.floor(position / 8);\n  const de = 8 - d;\n  const ef = (position + length) - ((a + 1) * 8);\n  let fg = (8 * (a + 2)) - (position + length);\n  const dg = ((a + 2) * 8) - position;\n  fg = Math.max(0, fg);\n  if (a >= array.length) {\n    console.warn('ran off the end of the buffer before finding EOI_CODE (end on input code)');\n    return EOI_CODE;\n  }\n  let chunk1 = array[a] & ((2 ** (8 - d)) - 1);\n  chunk1 <<= (length - de);\n  let chunks = chunk1;\n  if (a + 1 < array.length) {\n    let chunk2 = array[a + 1] >>> fg;\n    chunk2 <<= Math.max(0, (length - dg));\n    chunks += chunk2;\n  }\n  if (ef > 8 && a + 2 < array.length) {\n    const hi = ((a + 3) * 8) - (position + length);\n    const chunk3 = array[a + 2] >>> hi;\n    chunks += chunk3;\n  }\n  return chunks;\n}\n\nfunction appendReversed(dest, source) {\n  for (let i = source.length - 1; i >= 0; i--) {\n    dest.push(source[i]);\n  }\n  return dest;\n}\n\nfunction decompress(input) {\n  const dictionaryIndex = new Uint16Array(4093);\n  const dictionaryChar = new Uint8Array(4093);\n  for (let i = 0; i <= 257; i++) {\n    dictionaryIndex[i] = 4096;\n    dictionaryChar[i] = i;\n  }\n  let dictionaryLength = 258;\n  let byteLength = MIN_BITS;\n  let position = 0;\n\n  function initDictionary() {\n    dictionaryLength = 258;\n    byteLength = MIN_BITS;\n  }\n  function getNext(array) {\n    const byte = getByte(array, position, byteLength);\n    position += byteLength;\n    return byte;\n  }\n  function addToDictionary(i, c) {\n    dictionaryChar[dictionaryLength] = c;\n    dictionaryIndex[dictionaryLength] = i;\n    dictionaryLength++;\n    return dictionaryLength - 1;\n  }\n  function getDictionaryReversed(n) {\n    const rev = [];\n    for (let i = n; i !== 4096; i = dictionaryIndex[i]) {\n      rev.push(dictionaryChar[i]);\n    }\n    return rev;\n  }\n\n  const result = [];\n  initDictionary();\n  const array = new Uint8Array(input);\n  let code = getNext(array);\n  let oldCode;\n  while (code !== EOI_CODE) {\n    if (code === CLEAR_CODE) {\n      initDictionary();\n      code = getNext(array);\n      while (code === CLEAR_CODE) {\n        code = getNext(array);\n      }\n\n      if (code === EOI_CODE) {\n        break;\n      } else if (code > CLEAR_CODE) {\n        throw new Error(`corrupted code at scanline ${code}`);\n      } else {\n        const val = getDictionaryReversed(code);\n        appendReversed(result, val);\n        oldCode = code;\n      }\n    } else if (code < dictionaryLength) {\n      const val = getDictionaryReversed(code);\n      appendReversed(result, val);\n      addToDictionary(oldCode, val[val.length - 1]);\n      oldCode = code;\n    } else {\n      const oldVal = getDictionaryReversed(oldCode);\n      if (!oldVal) {\n        throw new Error(`Bogus entry. Not in dictionary, ${oldCode} / ${dictionaryLength}, position: ${position}`);\n      }\n      appendReversed(result, oldVal);\n      result.push(oldVal[oldVal.length - 1]);\n      addToDictionary(oldCode, oldVal[oldVal.length - 1]);\n      oldCode = code;\n    }\n\n    if (dictionaryLength + 1 >= (2 ** byteLength)) {\n      if (byteLength === MAX_BYTELENGTH) {\n        oldCode = undefined;\n      } else {\n        byteLength++;\n      }\n    }\n    code = getNext(array);\n  }\n  return new Uint8Array(result);\n}\n\nexport default class LZWDecoder extends BaseDecoder {\n  decodeBlock(buffer) {\n    return decompress(buffer, false).buffer;\n  }\n}\n"],"names":["decodeRowAcc","row","stride","length","offset","i","decodeRowFloatingPoint","bytesPerSample","index","count","wc","copy","slice","b","BaseDecoder","async","fileDirectory","buffer","decoded","this","decodeBlock","predictor","Predictor","isTiled","StripOffsets","block","width","height","bitsPerSample","planarConfiguration","Error","byteLength","Uint8Array","Uint16Array","Uint32Array","applyPredictor","TileWidth","ImageWidth","TileLength","RowsPerStrip","ImageLength","BitsPerSample","PlanarConfiguration","appendReversed","dest","source","push","decompress","input","dictionaryIndex","dictionaryChar","dictionaryLength","position","initDictionary","getNext","array","byte","d","a","Math","floor","de","ef","fg","dg","max","console","warn","chunk1","chunks","chunk2","hi","getByte","addToDictionary","c","getDictionaryReversed","n","rev","result","oldCode","code","val","oldVal","undefined","LZWDecoder"],"sourceRoot":""}